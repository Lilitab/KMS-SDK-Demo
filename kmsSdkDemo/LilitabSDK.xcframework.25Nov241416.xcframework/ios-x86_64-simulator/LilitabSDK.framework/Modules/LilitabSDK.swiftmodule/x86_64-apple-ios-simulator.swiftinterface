// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.10 (swiftlang-5.10.0.13 clang-1500.3.9.4)
// swift-module-flags: -target x86_64-apple-ios12.2-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name LilitabSDK
import AVFoundation
import AVKit
import DeveloperToolsSupport
import Foundation
@_exported import LilitabSDK
import Swift
import SwiftUI
import UIKit
import WebKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@objc @_inheritsConvenienceInitializers @objcMembers public class LilitabSound : NSObject, AVAudioPlayerDelegate {
  @objc public func cueSoundFrom(_ actionDictionary: [String : String]) -> (String)
  @objc public func deleteSounds(_ actionDictionary: [String : String]) -> (String)
  @objc public func playSoundFrom(_ actionDictionary: [String : String]) -> (String)
  @objc public func audioPlayerDidFinishPlaying(_ player: AVAudioPlayer, successfully flag: Bool)
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class WipedownMonitor : NSObject {
  @objc public class func sharedInstance() -> WipedownMonitor
  @objc public func snoozeCountVal() -> Int
  @objc public func getNextWipedown() -> String
  @objc public func getLastAlert() -> String
  @objc public func getLastWipedown() -> String
  @objc public func getWipedownIntervalMins() -> String
  @objc public func getSnoozeDurationMins() -> String
  @objc public func showWipedownPINViewControllerForDockUnlock(fromStr: String?)
  @objc public func showWipedownPINViewControllerForUserAuth()
  @objc public func setup()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class KMSWipedownPINViewController : UIViewController, KMSEventDelegate {
  @_Concurrency.MainActor(unsafe) @objc public func kmsUserAuthenticated(_ userId: String!, _ userName: String!)
  @_Concurrency.MainActor(unsafe) @objc public func kmsUserPINFailed(_ reason: String!)
  @_Concurrency.MainActor(unsafe) @objc public func kmsServiceReachabilityChanged(_ dict: [AnyHashable : Any]!)
  @_Concurrency.MainActor(unsafe) @objc public func kmsDockEvent(_ dockEvent: KMSDockEvent)
  @_Concurrency.MainActor(unsafe) @objc public func kmsDockStatusUpdate(_ dict: [AnyHashable : Any]!)
  @_Concurrency.MainActor(unsafe) @objc public func kmsBarShowAboutView()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewWillAppear(_ animated: Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidDisappear(_ animated: Bool)
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class KMSDockStatusMonitor : NSObject {
  @objc public func showBleConnectViewController()
  @objc public func showView6ChangePairingViewController()
  @objc public func showView4ConnectNotFoundViewController()
  @objc public func unpairBLEDock()
  @objc public func initForSDK()
  @objc public func handleDockStatusNotification()
  @objc public func showPairingStatusDisconnectConfirm(_: Notification? = nil)
  @objc public func showBLEDockPairingStatus(_: Notification? = nil)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class LilitabSpeech : NSObject, AVSpeechSynthesizerDelegate {
  @objc public static let error202String: Swift.String
  @objc public static let error202IgnoredString: Swift.String
  @objc public static let error400UnexpectedString: Swift.String
  @objc public static let error400NoDataString: Swift.String
  @objc public func speakFromDictionary(_ utterDict: [String : String]) -> (String)
  @objc public func speechSynthesizer(_ synthesizer: AVSpeechSynthesizer, didFinish utterance: AVSpeechUtterance)
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class KMSServerViewMonitor : NSObject {
  @objc public func initForSDK()
  @objc public func testAppBecameActive(_: Notification? = nil)
  @objc deinit
}
